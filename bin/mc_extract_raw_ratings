#!/usr/bin/env python3

import argparse
import pickle
import sys
import traceback

from metacritic import common
from metacritic import scraper
from pathlib import Path

from metacritic.scraper import DEFAULT_SENTINEL


def main(content_dir, sentinel, current_data_filename, group_pub):
    new_ratings = scraper.extract_all_ratings(
        content_dir,
        sentinel,
        group_pub=args.group_pub)
    if not current_data_filename:
        sys.stdout.buffer.write(pickle.dumps(new_ratings))
        return
    filename = Path(current_data_filename)
    if not filename.is_file():
        sys.stdout.buffer.write(pickle.dumps(new_ratings))
        return
    with open(filename, 'rb') as f:
        original = pickle.loads(f.read())
        original.update(new_ratings)
        sys.stdout.buffer.write(pickle.dumps(original))


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="""\
    Extract critic ratings and overall metascore from downloaded movie content page.

    Outputs a pickle dump of a Python dictionary that holds critic ratings for specified movies.
    """)
    parser.add_argument(
        '--group-publication', '-g',
        action='store_true',
        default=False,
        dest="group_pub",
        help="group all reviewers from a publication into one super-reviewer")
    parser.add_argument(
        "--current-data",
        help="""\
        Points to a cPickle file that represents current ratings data, if any.
        The output will be a merge of this existing data, plus any new reviews.
        """)
    parser.add_argument(
        "--sentinel",
        help="""\
        A file in the content_dir that is touched to indicate one or more \
        url contents were downloaded. This should be excluded.
        Default: __CONTENT_UPDATED.
        """)
    parser.add_argument(
        "content_dir",
        help="Directory containing movie content")
    args = parser.parse_args()
    main(
        args.content_dir,
        args.sentinel if args.sentinel else DEFAULT_SENTINEL,
        args.current_data,
        args.group_pub)
